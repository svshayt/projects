package operators;

import static util.Print.print;

public class UnsignedRightShiftExercise12 {
    public static void main(String[] args) {
        int i = -1 << 1;
        print(Integer.toBinaryString(i));
        i >>>= 1;
        print(Integer.toBinaryString(i));
        i >>>= 1;
        print(Integer.toBinaryString(i));
        i >>>= 1;
        print(Integer.toBinaryString(i));
        i >>>= 1;
        print(Integer.toBinaryString(i));
        i >>>= 1;
        print(Integer.toBinaryString(i));
        i >>>= 1;
        print(Integer.toBinaryString(i));
        i >>>= 1;
        print(Integer.toBinaryString(i));
        i >>>= 1;
        print(Integer.toBinaryString(i));
        i >>>= 1;
        print(Integer.toBinaryString(i));
        i >>>= 1;
        print(Integer.toBinaryString(i));
        i >>>= 1;
        print(Integer.toBinaryString(i));
        i >>>= 1;
        print(Integer.toBinaryString(i));
        i >>>= 1;
        print(Integer.toBinaryString(i));
        i >>>= 1;
        print(Integer.toBinaryString(i));
        i >>>= 1;
        print(Integer.toBinaryString(i));
        i >>>= 1;
        print(Integer.toBinaryString(i));
        i >>>= 1;
        print(Integer.toBinaryString(i));
        i >>>= 1;
        print(Integer.toBinaryString(i));
        i >>>= 1;
        print(Integer.toBinaryString(i));
        i >>>= 1;
        print(Integer.toBinaryString(i));
        i >>>= 1;
        print(Integer.toBinaryString(i));
        i >>>= 1;
        print(Integer.toBinaryString(i));
        i >>>= 1;
        print(Integer.toBinaryString(i));
        i >>>= 1;
        print(Integer.toBinaryString(i));
        i >>>= 1;
        print(Integer.toBinaryString(i));
        i >>>= 1;
        print(Integer.toBinaryString(i));
        i >>>= 1;
        print(Integer.toBinaryString(i));
        i >>>= 1;
        print(Integer.toBinaryString(i));
        i >>>= 1;
        print(Integer.toBinaryString(i));
        i >>>= 1;
        print(Integer.toBinaryString(i));
        i >>>= 1;
        print(Integer.toBinaryString(i));
    }
}
